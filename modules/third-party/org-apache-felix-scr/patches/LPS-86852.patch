diff --git a/org/apache/felix/scr/impl/helper/ComponentServiceObjectsHelper.java b/org/apache/felix/scr/impl/helper/ComponentServiceObjectsHelper.java
index 82377d2d3fe5..4852ab1937b7 100644
--- a/org/apache/felix/scr/impl/helper/ComponentServiceObjectsHelper.java
+++ b/org/apache/felix/scr/impl/helper/ComponentServiceObjectsHelper.java
@@ -41,8 +41,6 @@ public class ComponentServiceObjectsHelper
 
     private final List<ComponentServiceObjectsImpl> closedServices = new ArrayList<ComponentServiceObjectsImpl>();
 
-    private final ConcurrentMap<ServiceReference, Object> prototypeInstances = new ConcurrentHashMap<ServiceReference, Object>();
-
     public ComponentServiceObjectsHelper(final BundleContext bundleContext)
     {
         this.bundleContext = bundleContext;
@@ -65,7 +63,6 @@ public class ComponentServiceObjectsHelper
         {
         	cso.deactivate();
         }
-        prototypeInstances.clear();
     }
 
     public ComponentServiceObjects getServiceObjects(final ServiceReference<?> ref)
@@ -97,24 +94,11 @@ public class ComponentServiceObjectsHelper
         	}
             cso.close();
         }
-        prototypeInstances.remove(ref);
     }
 
-    public <T> T getPrototypeRefInstance(final ServiceReference<T> ref, ServiceObjects<T> serviceObjects)
+    public <T> T getPrototypeRefInstance(final ServiceReference<T> ref)
     {
-    	T service = (T) prototypeInstances.get(ref);
-    	if ( service == null )
-    	{
-    		service = serviceObjects.getService();
-    		T oldService = (T)prototypeInstances.putIfAbsent(ref, service);
-    		if ( oldService != null )
-    		{
-    			// another thread created the instance already
-    			serviceObjects.ungetService(service);
-    			service = oldService;
-    		}
-    	}
-    	return service;
+    	return (T) getServiceObjects(ref).getService();
     }
 
     private static final class ComponentServiceObjectsImpl implements ComponentServiceObjects
@@ -229,3 +213,4 @@ public class ComponentServiceObjectsHelper
 
     }
  }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/scr/impl/manager/DependencyManager.java b/org/apache/felix/scr/impl/manager/DependencyManager.java
index f28cee0e3224..7322a1169e89 100644
--- a/org/apache/felix/scr/impl/manager/DependencyManager.java
+++ b/org/apache/felix/scr/impl/manager/DependencyManager.java
@@ -1681,7 +1681,9 @@ public class DependencyManager<S, T> implements ReferenceManager<S, T>
             {
                 invokeUnbindMethod(componentContext, boundRef, trackingCount.get(), edgeInfo);
             }
-
+            
+            boundRef.unsetServiceObject(componentContext);
+            
         }
         latch.countDown();
     }
@@ -2320,9 +2322,9 @@ public class DependencyManager<S, T> implements ReferenceManager<S, T>
         }
         if (m_componentManager.getComponentMetadata().getServiceScope() == Scope.singleton)
         {
-            return new SinglePrototypeRefPair<>(m_componentManager.getBundleContext(), serviceReference);
+            return new SinglePrototypeRefPair<>(serviceReference);
         }
-        return new MultiplePrototypeRefPair<>(m_componentManager.getBundleContext(), serviceReference);
+        return new MultiplePrototypeRefPair<>(serviceReference);
     }
 
     private void deactivateComponentManager()
@@ -2331,3 +2333,4 @@ public class DependencyManager<S, T> implements ReferenceManager<S, T>
     }
 
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/scr/impl/manager/MultiplePrototypeRefPair.java b/org/apache/felix/scr/impl/manager/MultiplePrototypeRefPair.java
index b351f724f3d2..f8684e79acf9 100644
--- a/org/apache/felix/scr/impl/manager/MultiplePrototypeRefPair.java
+++ b/org/apache/felix/scr/impl/manager/MultiplePrototypeRefPair.java
@@ -20,11 +20,12 @@
 
 package org.apache.felix.scr.impl.manager;
 
+import java.util.Iterator;
+import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceObjects;
 import org.osgi.framework.ServiceReference;
 import org.osgi.service.log.LogService;
 
@@ -33,19 +34,11 @@ import org.osgi.service.log.LogService;
  */
 public class MultiplePrototypeRefPair<S, T> extends RefPair<S, T>
 {
-    private final ServiceObjects<T> serviceObjects;
     private final ConcurrentMap<ComponentContextImpl<S>, T> instances = new ConcurrentHashMap<>();
 
-    public MultiplePrototypeRefPair( BundleContext context, ServiceReference<T> ref )
+    public MultiplePrototypeRefPair( ServiceReference<T> ref )
     {
         super(ref);
-        this.serviceObjects = context.getServiceObjects(ref);
-    }
-
-    @Override
-    public ServiceObjects<T> getServiceObjects()
-    {
-        return serviceObjects;
     }
 
     @Override
@@ -57,13 +50,28 @@ public class MultiplePrototypeRefPair<S, T> extends RefPair<S, T>
     @Override
     public boolean setServiceObject(ComponentContextImpl<S> key, T serviceObject)
     {
-        return instances.putIfAbsent(key, serviceObject) == null;
+        return instances.putIfAbsent( key, serviceObject ) == null;
     }
 
     @Override
     public T unsetServiceObject(ComponentContextImpl<S> key)
     {
-        return instances.get(key);
+    	if ( key == null )
+    	{
+			final Iterator<Entry<ComponentContextImpl<S>, T>> iter = instances.entrySet().iterator();
+			while ( iter.hasNext() ) 
+			{
+				Entry<ComponentContextImpl<S>, T> e = iter.next();
+				doUngetService( e.getKey(), e.getValue() );
+   			} 
+    		instances.clear();
+    		return null ;
+    	}
+        T service = instances.remove( key );
+        if(service != null) {
+        	doUngetService( key, service );
+        }
+		return service;
     }
 
     @Override
@@ -75,7 +83,7 @@ public class MultiplePrototypeRefPair<S, T> extends RefPair<S, T>
     @Override
     public boolean getServiceObject(ComponentContextImpl<S> key, BundleContext context)
     {
-    	final T service = key.getComponentServiceObjectsHelper().getPrototypeRefInstance(this.getRef(), serviceObjects);
+    	final T service = key.getComponentServiceObjectsHelper().getPrototypeRefInstance(this.getRef());
         if ( service == null )
         {
             setFailed();
@@ -87,8 +95,20 @@ public class MultiplePrototypeRefPair<S, T> extends RefPair<S, T>
         if (!setServiceObject(key, service))
         {
             // Another thread got the service before, so unget our
-            serviceObjects.ungetService( service );
+        	doUngetService( key, service );
         }
         return true;
     }
+
+	private void doUngetService(ComponentContextImpl<S> key, final T service) {
+		try 
+		{
+			key.getComponentServiceObjectsHelper().getServiceObjects(getRef()).ungetService( service );
+		}
+		catch ( final IllegalStateException ise )
+		{
+			// ignore
+		}
+	}
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/scr/impl/manager/RefPair.java b/org/apache/felix/scr/impl/manager/RefPair.java
index 633fb584584f..e0527371fc56 100644
--- a/org/apache/felix/scr/impl/manager/RefPair.java
+++ b/org/apache/felix/scr/impl/manager/RefPair.java
@@ -44,11 +44,6 @@ public abstract class RefPair<S, T>
         return ref;
     }
 
-    public ServiceObjects<T> getServiceObjects()
-    {
-        return null;
-    }
-
     public abstract boolean getServiceObject( ComponentContextImpl<S> key, BundleContext context );
 
     public abstract T getServiceObject(ComponentContextImpl<S> key);
@@ -77,3 +72,4 @@ public abstract class RefPair<S, T>
         this.deleted = true;
     }
 }
+/* @generated */
\ No newline at end of file
diff --git a/org/apache/felix/scr/impl/manager/SinglePrototypeRefPair.java b/org/apache/felix/scr/impl/manager/SinglePrototypeRefPair.java
index 12dbc12f8431..df34e69b3711 100644
--- a/org/apache/felix/scr/impl/manager/SinglePrototypeRefPair.java
+++ b/org/apache/felix/scr/impl/manager/SinglePrototypeRefPair.java
@@ -21,7 +21,6 @@
 package org.apache.felix.scr.impl.manager;
 
 import org.osgi.framework.BundleContext;
-import org.osgi.framework.ServiceObjects;
 import org.osgi.framework.ServiceReference;
 import org.osgi.service.log.LogService;
 
@@ -30,18 +29,9 @@ import org.osgi.service.log.LogService;
  */
 public class SinglePrototypeRefPair<S, T> extends SingleRefPair<S, T>
 {
-    private final ServiceObjects<T> serviceObjects;
-
-    public SinglePrototypeRefPair( BundleContext context, ServiceReference<T> ref )
+    public SinglePrototypeRefPair( ServiceReference<T> ref )
     {
         super(ref);
-        this.serviceObjects = context.getServiceObjects(ref);
-    }
-
-    @Override
-    public ServiceObjects<T> getServiceObjects()
-    {
-        return serviceObjects;
     }
 
     @Override
@@ -53,7 +43,7 @@ public class SinglePrototypeRefPair<S, T> extends SingleRefPair<S, T>
     @Override
     public boolean getServiceObject(ComponentContextImpl<S> key, BundleContext context)
     {
-    	final T service = key.getComponentServiceObjectsHelper().getPrototypeRefInstance(this.getRef(), serviceObjects);
+    	final T service = key.getComponentServiceObjectsHelper().getPrototypeRefInstance(this.getRef());
         if ( service == null )
         {
             setFailed();
@@ -65,9 +55,32 @@ public class SinglePrototypeRefPair<S, T> extends SingleRefPair<S, T>
         if (!setServiceObject(key, service))
         {
             // Another thread got the service before, so unget our
-            serviceObjects.ungetService( service );
+        	doUngetService(key, service);
         }
         return true;
     }
 
+    @Override
+    public T unsetServiceObject(ComponentContextImpl<S> key)
+    {
+    	final T service = super.unsetServiceObject(key);
+    	if ( service != null )
+    	{
+			doUngetService(key, service);
+    	}
+    	return null ;
+    }
+
+	private void doUngetService(ComponentContextImpl<S> key, final T service) {
+		try 
+		{
+			key.getComponentServiceObjectsHelper().getServiceObjects(getRef()).ungetService(service);
+		}
+		catch (final IllegalStateException ise)
+		{
+			// ignore
+		}
+	}
+    
 }
+/* @generated */
\ No newline at end of file
